import Options from "kubechain/src/main/lib/blockchains/fabric/options";
import CaliperConfiguration from "../../shared/test-runner/caliperconfiguration";
export default class CaliperMapper {
    private options;
    private networkConfiguration;
    private deployment;
    private benchmarkConfiguration;
    private benchmarkCallbacks;
    private channels;
    private cryptographicMaterialVolumes;
    private configurations;
    private peerOrganizationUtil;
    private writer;
    private cryptographicMaterialAbsolutePaths;
    private searchPaths;
    private chainCode;
    private chainCodePassThroughVolume;
    private reportsVolume;
    private resources;
    private workloads;
    private loadBalancerIp;
    private parentIpAddress;
    private benchmarkPath;
    private mountPaths;
    private namespace;
    constructor(options: Options);
    start(caliperConfiguration: CaliperConfiguration, loadBalancerIp: string, parentIpAddress: string, benchmarkPath: string): Promise<void>;
    private createConfiguration;
    private createNamespace;
    private createNetworkConfiguration;
    private createBenchmarkConfiguration;
    private setDockerMonitorUrls;
    private getNodeIpAddressesFromCluster;
    private createBenchmarkCallbacks;
    private callbacksDirectoryPath;
    private createCryptographicMaterial;
    private createChannels;
    private createCaliperContainers;
    private createInitContainers;
    private createCaliperContainer;
    private addEnvironmentVariables;
    private mountConfigurations;
    private mountConfiguration;
    private mountBenchmarkCallbacks;
    private mountChannels;
    private mountChaincodesFromConfiguration;
    private mountChainCodePassThroughVolume;
    private mountCryptographicMaterial;
    private createCaliperJob;
    private setDeploymentAffinity;
    private createTestRunnerLoadBalanceService;
    private addConfigurationAsVolume;
    private addBenchmarkCallbacksAsVolumes;
    private addChannelsAsVolumes;
    private addChainCodesAsVolumes;
    private addPassThroughVolume;
    private addReportsVolume;
    private addCryptographicMaterialAsVolumes;
    private createDockerDaemonSet;
    private createChainCodes;
    private mountReports;
    private createBlockEdgeDeployment;
    write(): void;
    addResources(outputPath: string): void;
}
